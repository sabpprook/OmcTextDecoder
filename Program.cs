using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OmcTextDecoder
{
    class Program
    {
        static byte[] salts = new byte[]
        {
            0x41, 0xc5, 0x21, 0xde, 0x6b, 0x1c, 0x95, 0x37, 0x4e, 0x11, 0xaf, 0x06, 0xb0, 0x87, 0xdd, 0xe9,
            0x48, 0x7a, 0xc1, 0xd5, 0x44, 0x77, 0xb2, 0x91, 0xc4, 0x1f, 0x3c, 0x39, 0x5c, 0xa8, 0x9c, 0xbb,
            0x96, 0x5b, 0x45, 0x5d, 0x6e, 0x17, 0x5d, 0x35, 0xd4, 0xcd, 0x40, 0xb0, 0x2e, 0x02, 0xfc, 0x0c,
            0xd3, 0x50, 0xd4, 0xdd, 0x91, 0xe4, 0xbe, 0x8c, 0x27, 0x02, 0xe5, 0xd3, 0xcc, 0x7d, 0x27, 0x42,
            0xa6, 0x3f, 0x97, 0xbd, 0x54, 0xc7, 0xfc, 0xfc, 0x65, 0xa6, 0x51, 0x0a, 0xdf, 0x01, 0x43, 0xc7,
            0xb9, 0x12, 0xb6, 0x66, 0x60, 0xa7, 0x40, 0xef, 0x36, 0xa2, 0xac, 0xbe, 0x0e, 0x77, 0x79, 0x02,
            0xb2, 0xb1, 0x59, 0x3f, 0x5d, 0x6d, 0xb2, 0xcd, 0x42, 0xdc, 0x20, 0x56, 0x03, 0xc6, 0xf1, 0x5c,
            0x3a, 0x02, 0xa7, 0xb0, 0xf3, 0xff, 0x7a, 0xfc, 0x30, 0x3f, 0xd4, 0x3b, 0x64, 0xd6, 0xd3, 0x3b,
            0xf9, 0xef, 0xca, 0x22, 0xca, 0x47, 0xc0, 0xe6, 0xa9, 0xb0, 0xef, 0xd4, 0xda, 0x90, 0x46, 0x0a,
            0x96, 0x5f, 0xe8, 0xfc, 0x8a, 0x2d, 0xab, 0xf3, 0x55, 0x19, 0x9a, 0x89, 0x0d, 0xdb, 0x74, 0x2e,
            0xbb, 0x3b, 0x2a, 0xa6, 0xda, 0x97, 0x65, 0x89, 0xdc, 0x61, 0xfd, 0xc2, 0xa5, 0x9f, 0x83, 0x11,
            0x0e, 0x6a, 0xb8, 0x89, 0x63, 0x6f, 0x14, 0x12, 0xe5, 0x71, 0x40, 0xe8, 0x4a, 0xc4, 0x9c, 0x1a,
            0x38, 0xd4, 0xba, 0x0c, 0xcd, 0x9c, 0xe0, 0xf5, 0x1a, 0x30, 0x8b, 0x62, 0xa3, 0x33, 0xe7, 0xb1,
            0xe1, 0x61, 0x57, 0x97, 0xc0, 0x07, 0xf3, 0x9b, 0x21, 0x86, 0x05, 0x98, 0x59, 0xd4, 0x8b, 0x3f,
            0xb0, 0xfa, 0xb9, 0x92, 0xe3, 0x97, 0x74, 0x6b, 0xa3, 0x5b, 0xd7, 0xf3, 0x14, 0x8d, 0xb2, 0x2b,
            0x4f, 0x86, 0x06, 0x66, 0xe0, 0x34, 0x8a, 0xcd, 0x48, 0x98, 0x29, 0xda, 0x7c, 0x48, 0x82, 0xdd
        };
        static byte[] shifts = new byte[]
        {
            0x01, 0x01, 0x00, 0x02, 0x02, 0x04, 0x05, 0x00,0x04, 0x07, 0x01, 0x06, 0x05, 0x03, 0x03, 0x01,
            0x02, 0x05, 0x00, 0x06, 0x02, 0x02, 0x04, 0x02,0x02, 0x03, 0x00, 0x02, 0x01, 0x02, 0x04, 0x03,
            0x04, 0x00, 0x00, 0x00, 0x03, 0x05, 0x03, 0x01,0x06, 0x05, 0x06, 0x01, 0x01, 0x01, 0x00, 0x00,
            0x03, 0x02, 0x07, 0x07, 0x05, 0x06, 0x07, 0x03,0x05, 0x01, 0x00, 0x07, 0x06, 0x03, 0x06, 0x05,
            0x04, 0x05, 0x03, 0x05, 0x01, 0x03, 0x03, 0x01,0x05, 0x04, 0x01, 0x00, 0x00, 0x02, 0x06, 0x06,
            0x06, 0x06, 0x04, 0x00, 0x01, 0x01, 0x00, 0x05,0x05, 0x04, 0x02, 0x04, 0x06, 0x01, 0x07, 0x01,
            0x02, 0x01, 0x01, 0x06, 0x05, 0x04, 0x07, 0x06,0x05, 0x01, 0x06, 0x07, 0x00, 0x02, 0x06, 0x03,
            0x01, 0x07, 0x01, 0x01, 0x07, 0x04, 0x00, 0x04,0x02, 0x05, 0x03, 0x01, 0x01, 0x05, 0x06, 0x00,
            0x03, 0x05, 0x03, 0x06, 0x05, 0x07, 0x02, 0x05,0x06, 0x06, 0x02, 0x02, 0x03, 0x06, 0x00, 0x04,
            0x03, 0x02, 0x00, 0x02, 0x02, 0x03, 0x05, 0x03,0x03, 0x02, 0x05, 0x05, 0x05, 0x01, 0x03, 0x01,
            0x01, 0x01, 0x04, 0x05, 0x01, 0x06, 0x02, 0x04,0x07, 0x01, 0x04, 0x06, 0x00, 0x06, 0x04, 0x03,
            0x02, 0x06, 0x01, 0x06, 0x03, 0x02, 0x01, 0x06,0x07, 0x03, 0x02, 0x01, 0x01, 0x05, 0x06, 0x07,
            0x02, 0x02, 0x02, 0x07, 0x04, 0x06, 0x07, 0x05,0x03, 0x01, 0x04, 0x02, 0x07, 0x01, 0x06, 0x02,
            0x04, 0x01, 0x05, 0x06, 0x05, 0x04, 0x05, 0x00,0x01, 0x01, 0x06, 0x03, 0x07, 0x02, 0x00, 0x02,
            0x05, 0x00, 0x01, 0x03, 0x03, 0x02, 0x06, 0x07,0x07, 0x02, 0x05, 0x06, 0x00, 0x04, 0x01, 0x02,
            0x05, 0x03, 0x07, 0x06, 0x05, 0x02, 0x05, 0x02,0x00, 0x01, 0x03, 0x01, 0x04, 0x03, 0x04, 0x02
        };

        static byte[] omc_decode(byte[] source)
        {
            byte[] results = new byte[source.Length];
            for (int i = 0; i < source.Length; i++)
            {
                results[i] = (byte)(((source[i] & 255) << shifts[i % 256]) | ((source[i] & 255) >> (8 - shifts[i % 256])));
                results[i] = (byte)(results[i] ^ salts[i % 256]);
            }
            results = gzip_decompress(results);
            return results;
        }

        static byte[] omc_encode(byte[] source)
        {
            source = gzip_compress(source);
            byte[] results = new byte[source.Length];
            for (int i = 0; i < source.Length; i++)
            {
                results[i] = (byte)(source[i] ^ salts[i % 256]);
                results[i] = (byte)(((results[i] & 255) >> shifts[i % 256]) | ((results[i] & 255) << (8 - shifts[i % 256])));
            }
            return results;
        }

        static byte[] gzip_decompress(byte[] data)
        {
            using (var buff = new MemoryStream(data))
            {
                using (var gzip = new GZipStream(buff, CompressionMode.Decompress))
                {
                    using (var result = new MemoryStream())
                    {
                        gzip.CopyTo(result);
                        data = result.ToArray();
                    }
                }
            }
            return data;
        }

        static byte[] gzip_compress(byte[] data)
        {
            using (var buff = new MemoryStream())
            {
                using (var gzip = new GZipStream(buff, CompressionLevel.Optimal))
                    gzip.Write(data, 0, data.Length);
                data = buff.ToArray();
            }
            return data;
        }

        static void Main(string[] args)
        {
            Console.OutputEncoding = Console.InputEncoding = Encoding.UTF8;
            if (args.Length != 2 || (args[0] != "d" && args[0] != "e") || !File.Exists(args[1]))
            {
                Usage();
                return;
            }
            var data = File.ReadAllBytes(args[1]);

            if (args[0] == "d")
                data = omc_decode(data);

            if (args[0] == "e")
                data = omc_encode(data);

            File.WriteAllBytes(args[1], data);
        }

        static void Usage()
        {
            Console.WriteLine("*************************************************");
            Console.WriteLine("    SAMSUNG cscfeature.xml deobfuscation tool");
            Console.WriteLine("*************************************************");
            Console.WriteLine("(d)ecode");
            Console.WriteLine("-- OmcTextDecoder d cscfeature.xml");
            Console.WriteLine();
            Console.WriteLine("(e)ncode");
            Console.WriteLine("-- OmcTextDecoder e cscfeature.xml");
            Console.ReadKey();
        }
    }
}
